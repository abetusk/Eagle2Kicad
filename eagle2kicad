#!/usr/bin/env python3

import sys

import traceback
import datetime
import os.path
from argparse import ArgumentParser
from Board.Board import Board
from Library.Library import Library

from xml.etree.ElementTree import ElementTree
from xml.etree.ElementTree import XMLParser


logFile = open("Log.txt", "a")


def getRootNode(fileName):
    parser = XMLParser(encoding="UTF-8")
    node = ElementTree()
    node.parse(fileName, parser)
    node = node.getroot()
    return node


def convertBoard(fileName, outFileName):
    logFile.write("*******************************************\n")
    logFile.write("Converting: " + fileName + "\n")
    logFile.write("Outputing: " + outFileName + "\n\n")

    try:

        node = getRootNode(fileName)
        brd = Board(node)
        open(outFileName, 'w').close()
        outFile = open(outFileName, "a")
        brd.write(outFile)
        outFile.close()

    except BaseException as e:
        logFile.write("Conversion Failed\n\n")
        logFile.write(traceback.format_exc())
        logFile.write("*******************************************\n\n\n")
        return False, "Error Converting Board \n" + str(e) + \
                      "\nSee Log.txt for more info"

    logFile.write("Conversion Successfull\n\n")
    logFile.write("*******************************************\n\n\n")
    return True, "The Board Has Finished Converting"


def convertLib(fileName, symFileName, modFileName):
    logFile.write("*******************************************\n")
    logFile.write("Converting Lib: " + fileName + "\n")
    logFile.write("Module Output: " + modFileName + "\n")
    logFile.write("Symbol Output: " + symFileName + "\n")

    name = fileName.replace("/", "\\")
    name = name.split("\\")[-1]
    name = name.split(".")[0]

    logFile.write("Lib Name: " + name + "\n")

    try:
        node = getRootNode(fileName)
        node = node.find("drawing").find("library")
        lib = Library(node, name)

        open(modFileName, 'w').close()
        open(symFileName, 'w').close()

        modFile = open(modFileName, "a")
        symFile = open(symFileName, "a")

        lib.writeLibrary(modFile, symFile)

        modFile.close()
        symFile.close()
    except BaseException as e:
        logFile.write("Conversion Failed\n\n")
        logFile.write(traceback.format_exc())
        logFile.write("*******************************************\n\n\n")

        return False, "Error Converting Library: '" + name + "'\nError: " + str(e) + "\nSee Log.txt for more info"

    logFile.write("Conversion Successfull\n")
    logFile.write("*******************************************\n\n\n")

    return True, "Conversion of Library '" + name + "' Complete"


def convertSch(schFile, outFile):
    logFile.write("*******************************************\n")
    logFile.write("Converting Schem: \n")
    logFile.write("Conversion Failed: \n\n")
    logFile.write("Schematic Conversion not yet Supported\n\n")
    logFile.write("*******************************************\n\n\n")

    return False, "Converting Schematics is not yet supported"


def startCmdLine():
    # Setup argument parser
    parser = ArgumentParser()
    parser.add_argument("-l", "-L", "--Library",
                        dest="Library",
                        nargs=3,
                        metavar=("inFile", "symFile", "modFile"),
                        help="Convert an Eagle Library",
                        action="append",
                        type=str)

    parser.add_argument("-b", "-B", "--Board",
                        dest="Board",
                        nargs=2,
                        metavar=("inFile", "brdFile"),
                        help="Convert an Eagle Board",
                        action="append",
                        type=str)

    parser.add_argument("-s", "-S", "--Schematic",
                        dest="Schem",
                        nargs=2,
                        metavar=("inFile", "schFile"),
                        help="Convert an Eagle Schematic",
                        action="append",
                        type=str)

    # Process arguments
    args = parser.parse_args()

    if args.Schem is None and args.Board is None and args.Library is None:
        parser.print_help()

    if args.Schem != None:
        for sch in args.Schem:
            val = convertSch(sch[0], sch[1])
            if val[0]:
                sys.stdout.write(val[1] + "\n")
            else:
                sys.stderr.write(val[1] + "\n")

    if args.Board != None:
        for brd in args.Board:
            val = convertBoard(brd[0], brd[1])
            if val[0]:
                sys.stdout.write(val[1] + "\n")
            else:
                sys.stderr.write(val[1] + "\n")

    if args.Library != None:
        for lib in args.Library:
            val = convertLib(lib[0], lib[1], lib[2])
            if val[0]:
                sys.stdout.write(val[1] + "\n")
            else:
                sys.stderr.write(val[1] + "\n")


def main():
    now = datetime.datetime.now()
    logFile.write("###############################################################################\n")
    logFile.write("#Session: " + now.strftime("%Y-%m-%d %H:%M:%S") + "\n")
    logFile.write("###############################################################################\n\n\n")

    startCmdLine()

if __name__ == "__main__":
    main()

